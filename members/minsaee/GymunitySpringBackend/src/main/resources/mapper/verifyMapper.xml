<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gymunity.challenge.repository.VerifyMapper">
	<resultMap id="verifyResultMap" type="Verify">
		<result column="vi_id" property="viId" />
		<result column="vi_user_id" property="userId" />
		<result column="vi_ch_id" property="chId" />
		<result column="upload1" property="upload1" />
		<result column="upload2" property="upload2" />
		<result column="update_verify" property="updateVerify" />
	</resultMap>

	<!-- 인증 사진 등록-->
	<!-- verify 테이블 데이터 삽입 -->
	<insert id="insertVerify" parameterType="Verify" useGeneratedKeys="true"
		keyProperty="viId">
		INSERT INTO verify (vi_user_id, vi_ch_id, upload1, upload2)
		VALUES (#{userId}, #{chId}, #{upload1}, #{upload2})
	</insert>

	<!-- verify 테이블 조회-->
	<select id="selectVerifyByUserIdAndChId" parameterType="int"
		resultMap="verifyResultMap">
		SELECT *
		FROM verify
		WHERE vi_user_id = #{userId} AND vi_ch_id = #{chId}
		ORDER BY update_verify DESC LIMIT 1
	</select>
    
	<!-- verify 테이블 업데이트-->
	<update id="updateVerify" parameterType="Verify">
		UPDATE verify
		SET upload2 = #{upload2}, update_verify = #{updateVerify}
		WHERE vi_user_id = #{userId}
		AND vi_ch_id = #{chId}
		AND vi_id = #{viId}
	</update>

	<insert id="verph" parameterType="Verify">
		INSERT INTO verify
		(vi_user_id, vi_ch_id, upload1, upload2, result)
		VALUES (#{vi_user_id}, #{vi_ch_id}, #{upload1}, #{upload2}, 'Y')
	</insert>

	<!-- 인증 Y값 카운트 -->
	<select id="countVerified" parameterType="Verify">
		SELECT COUNT(*) AS verified_count
		FROM challenges c
		INNER JOIN verify v ON c.ch_id = v.vi_ch_id
		WHERE v.vi_user_id = #{userId} AND v.vi_ch_id = #{chId} AND v.result =
		'Y';
	</select>


	<update id="updateMemRate" parameterType="Verify">
		UPDATE members m
		JOIN (
		SELECT
		cm.mem_user_id,
		cm.mem_ch_id,
		ROUND((COUNT(DISTINCT CASE WHEN v.result = 'Y' THEN v.vi_id ELSE NULL
		END) / MAX(DATEDIFF(c.ch_end_date, c.ch_start_date))) * 100, 1) AS su
		FROM
		members cm
		JOIN
		challenges c ON cm.mem_ch_id = c.ch_id
		JOIN
		verify v ON v.vi_user_id = cm.mem_user_id AND v.vi_ch_id = cm.mem_ch_id
		WHERE
		v.vi_user_id = #{vi_user_id} AND v.vi_ch_id = #{vi_ch_id}
		GROUP BY
		cm.mem_user_id, cm.mem_ch_id
		) AS su_data ON m.mem_user_id = su_data.mem_user_id AND m.mem_ch_id =
		su_data.mem_ch_id
		SET
		m.archive_rate = su_data.su
	</update>


</mapper>   
