<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gymunity.challenge.repository.ChallengeMapper">
	<!-- java.sql.Date 타입에서 LocalDate 타입 객체로 변환 -->
	<resultMap id="challengeResultMap" type="Challenge">
		<id column="ch_id" property="chId" />
		<result column="ch_id" property="chId" />
		<result column="betting_point" property="bettingPoint" />
		<result column="ch_start_date" property="chStartDate" />
		<result column="ch_end_date" property="chEndDate" />
		<result column="verify_term" property="verifyTerm" />
		<result column="challenge_period" property="challengePeriod" />
		<result column="total_date" property="totalDate" />
		<result column="user_id" property="userId" />
		<result column="nick_name" property="nickName" />
		<result column="grade_name" property="gradeName" />
		<result column="admin_yn" property="adminYn" />
	</resultMap>

	<!-- 챌린지 생성-->
	<!-- challenges 테이블 데이터 삽입-->
	<insert id="insertChallenges" parameterType="Challenge"
		useGeneratedKeys="true"
		keyProperty="chId">
	    <![CDATA[
	    INSERT INTO challenges (title, content, category, betting_point, ch_start_date, ch_end_date, verify_term, challenge_period, total_date, user_id)
	    VALUES (#{title}, #{content}, #{category}, #{bettingPoint}, #{chStartDate}, #{chEndDate}, #{verifyTerm}, #{challengePeriod}, #{totalDate}, #{userId})
        ]]>
    </insert>

	<!-- 챌린지 리스트 조회-->
	<!-- 챌린지 리스트 불러오기 -->
	<select id="list" resultType="Challenge" parameterType="PageDTO"
		resultMap="challengeResultMap">
		SELECT c.*, u.nick_name, u.grade_name, u.admin_yn
		FROM challenges c
		JOIN users u ON c.user_id = u.user_id
		ORDER BY FIELD(c.proceed, 'rec', 'pr', 'done'), c.ch_id DESC
		LIMIT #{startRow}, #{blockCount}
	</select>

	<!-- 챌린지 총 개수 -->
	<select id="count" resultType="int">
		SELECT COUNT(*) FROM challenges
	</select>
	
	<!-- 참가중인 챌린지 리스트 불러오기-->
	<select id="joinList" resultType="Challenge" parameterType="int">
		SELECT c.*, u.nick_name, u.grade_name, u.admin_yn
		FROM challenges c
		JOIN users u ON c.user_id = u.user_id
		WHERE c.ch_id IN (
			SELECT ch_id1 
			FROM profiles
			WHERE user_id = #{userId}
			UNION
			SELECT ch_id2
			FROM profiles
			WHERE user_id = #{userId}
			)
		ORDER BY c.ch_id DESC
	  </select>

	<!-- 참가중인 챌린지id 리스트 불러오기-->
	<select id="joinChIdList" resultType="ProfileDTO" parameterType="int">
		SELECT ch_id1, ch_id2
		FROM profiles
		WHERE user_id=#{userId}
	</select>

	<!-- 챌린지 참가-->
	<!-- members 테이블에서 user_id와 ch_id로 검색 -->
	<select id="countMembersByUserIdAndChId" parameterType="int"
		resultType="int">
		SELECT COUNT(*)
		FROM members
		WHERE mem_user_id = #{userId} AND mem_ch_id = #{chId}
	</select>

	<!-- members 테이블 데이터 삽입 -->
	<insert id="insertMembers" parameterType="Member">
        <![CDATA[
        INSERT INTO members (mem_user_id, mem_ch_id, registrant)
        VALUES (#{memUserId}, #{memChId}, #{registrant})
        ]]> 
    </insert>

	<!-- profile 테이블 ch_id 업데이트-->
	<update id="updateProfile" parameterType="int">
		UPDATE profiles
		SET
		ch_id1 = CASE
		WHEN ch_id1 = 0 THEN #{chId}
		ELSE ch_id1
		END,
		ch_id2 = CASE
		WHEN ch_id2 = 0 THEN #{chId}
		ELSE ch_id2
		END
		WHERE user_id = #{userId}
	</update>

	<!-- 업데이트한 행의 수를 불러오기 -->
	<select id="getUpdateCount" resultType="int">
		SELECT ROW_COUNT() AS updateCount
	</select>

	<!-- count 업데이트-->
	<update id="updateChallengeCount" parameterType="int">
		UPDATE challenges
		SET count = count + 1
		WHERE ch_id = #{chId}
	</update>

	<!-- userId로 challenges 테이블 조회-->
	<select id="selectChallengesByUserId" parameterType="int"
		resultMap="challengeResultMap">
		SELECT * FROM challenges
		WHERE user_id=#{userId}
	</select>

	<!-- chId로 challenges 테이블 조회-->
	<select id="selectChallengesByChId" resultType="Challenge"
		parameterType="int"
		resultMap="challengeResultMap">
		SELECT c.*, u.nick_name, u.grade_name, u.admin_yn
		FROM challenges c
		JOIN users u ON c.user_id = u.user_id
		WHERE ch_id=#{chId}
	</select>

	<!-- 챌린지 수정-->
	<!-- challenges 테이블 업데이트-->
	<update id="updateChallenges" parameterType="Challenge">
		UPDATE challenges
		SET title = #{title}, content = #{content}, category = #{category},
		ch_start_date = #{chStartDate}, ch_end_date = #{chEndDate}
		WHERE user_id = #{userId}
	</update>

	<!-- 챌린지 삭제-->
	<!-- challenges 테이블에 데이터 삭제-->
	<delete id="deleteChallenges" parameterType="int">
		DELETE FROM challenges
		WHERE ch_id=#{chId}
	</delete>
<<<<<<< Updated upstream


=======
	<!-- profile 테이블 ch_id 업데이트-->
    <update id="updateProfileFinished">
	    UPDATE profiles
	    SET
	        ch_id1 = CASE WHEN ch_id1 = #{chId} THEN 0 ELSE ch_id1 END,
	        ch_id2 = CASE WHEN ch_id2 = #{chId} THEN 0 ELSE ch_id2 END
	    WHERE user_id = #{userId}
	        AND (ch_id1 = #{chId} OR ch_id2 = #{chId})
	</update>
>>>>>>> Stashed changes
</mapper>
