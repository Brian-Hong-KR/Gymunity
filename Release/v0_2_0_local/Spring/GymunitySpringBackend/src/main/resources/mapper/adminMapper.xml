<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gymunity.admin.repository.AdminMapper">
	<resultMap id="verifyResultMap" type="Verify">
		<result column="vi_id" property="viId" />
		<result column="vi_user_id" property="userId" />
		<result column="vi_ch_id" property="chId" />
		<result column="upload1" property="upload1" />
		<result column="upload2" property="upload2" />
		<result column="update_verify" property="updateVerify" />
	</resultMap>
	
	<resultMap id="userResultMap" type="User">
		<result property="userId" column="user_id" jdbcType="INTEGER" />
		<result
			property="userAccountId" column="user_account_id" />
		<result
			property="gradeName" column="grade_name" />
		<result
			property="nickName" column="nick_name" />
		<result
			property="adminYn" column="admin_yn" />
			<result
			property="isActive" column="is_active" />
			<result
			property="lastSignin" column="last_signin" />
			<result
			property="userEmail" column="user_email" />
	</resultMap>

	<!-- 관리자 인증 사진 확인-->
	<!-- 인증사진 목록가져오기 -->
	<select id="selectPhotosByResultN" resultType="PhotoDTO">
		SELECT
		v.vi_id AS viId,
		v.upload1 AS imagePath1,
		v.upload2 AS imagePath2,
		c.title AS challengeTitle,
		c.proceed AS proceed,
		v.update_verify AS dateUpdated
		FROM
		verify v
		JOIN
		challenges c ON v.vi_ch_id = c.ch_id
		WHERE
		v.result = 'N' AND
		(v.upload1 IS NOT NULL) AND
		(v.upload2 IS NOT NULL)

		ORDER BY
		c.ch_id, v.update_verify DESC
	</select>

	<!-- verify 테이블 조회-->
	<select id="selectVerifyByviId" parameterType="int"
		resultMap="verifyResultMap">
		SELECT *
		FROM verify
		WHERE vi_id = #{viId}
	</select>

	<!-- result 업데이트 -->
	<update id="updateResult">
		UPDATE verify
		SET result = #{result}
		WHERE vi_id = #{viId}
	</update>

	<!-- 인증 Y값 카운트 -->
	<select id="countSuccessfulVerifications" resultType="int">
		SELECT COUNT(*)
		FROM verify
		WHERE vi_user_id = #{userId}
		AND vi_ch_id = #{chId}
		AND result = 'Y'
	</select>

	<!-- achieve_rate 업데이트-->
	<update id="updateAchieveRate">
		UPDATE members
		SET achieve_rate = #{achieveRate}
		WHERE mem_user_id = #{userId}
		AND mem_ch_id = #{chId}
	</update>

	<!-- AARRR -->
	<!-- 유입자데이터 가져오기-->
	<select id="selectAllSubmissions" resultType="java.time.LocalDate">
		SELECT timestamp
		FROM user_events
		WHERE event_type = 001
	</select>

	<!-- 회원가입데이터 가져오기-->
	<select id="selectAllSignupDates" resultType="java.time.LocalDate">
		SELECT signup_date
		FROM profiles
	</select>

	<!-- 로그인데이터 가져오기-->
	<select id="selectAllSigninDates" resultType="java.time.LocalDate">
		SELECT timestamp
		FROM user_events
		WHERE event_type = 002
	</select>

	<!-- 추천인등록 회원가입데이터 가져오기-->
	<select id="selectReferrerSignupDates" resultType="java.time.LocalDate">
		SELECT signup_date
		FROM profiles
		WHERE referrer_id IS NOT NULL AND referrer_id != 0
	</select>
	
	
	
	<!-- 관리자 회원 수정-->
	<!-- nick_name으로 user_id 확인하기-->
	<select id="getUserIdByNickName" resultType="int" parameterType="String">
        SELECT user_id 
        FROM users 
        WHERE nick_name = #{nickName}
    </select>

	<!-- 회원 정보 불러오기-->
	<select id="getUserDetails" parameterType="int" resultType="UserDetails">
        SELECT u.user_id AS userId, 
            u.user_account_id AS userAccountId, 
            u.grade_name AS gradeName, 
            u.nick_name AS nickName, 
            u.admin_yn AS adminYn,
            u.is_active AS isActive, 
            u.last_signin AS lastSignin, 
            p.user_email AS userEmail
        FROM users u
        JOIN profiles p ON u.user_id = p.user_id
        WHERE u.user_id = #{userId}
    </select>
    
    <!-- nickName 수정-->
    <update id="updateNickName">
        UPDATE users
        SET nick_name = #{nickName}
        WHERE user_id = #{userId}
    </update>
    
    <!-- is_active 수정-->
    <update id="updateIsActive">
        UPDATE users
        SET is_active = CASE
            WHEN is_active = 'y' THEN 'n'
            WHEN is_active = 'n' THEN 'y'
            ELSE is_active
        END
        WHERE user_id = #{userId}
    </update>

 <!-- 닉네임 중복 체크 -->
	<select id="Namecheck" resultType="string" resultMap="userResultMap">
    	SELECT *
		FROM users
		WHERE nick_name = #{nickName}
	</select>

	<!-- 포인트 조회, 업데이트-->
	<!-- userAccountId로 포인트 조회하기-->
	<select id="getPointsByUserAccountId" resultType="PointDetailDTO"
		parameterType="String">
		SELECT
		points,
		reason,
		time
		FROM (
		SELECT
		points_added AS points,
		added_reason AS reason,
		added_at AS time,
		u.user_id
		FROM
		point_add pa
		INNER JOIN users u ON pa.user_id = u.user_id
		WHERE
		u.user_account_id = #{userAccountId}

		UNION ALL

		SELECT
		-points_subtracted AS points,
		subtracted_reason AS reason,
		subtracted_at AS time,
		u.user_id
		FROM
		point_subtract ps
		INNER JOIN users u ON ps.user_id = u.user_id
		WHERE
		u.user_account_id = #{userAccountId}

		UNION ALL

		SELECT
		points_adjusted AS points,
		reason AS reason,
		adjusted_at AS time,
		u.user_id
		FROM
		point_adjust pj
		INNER JOIN users u ON pj.user_id = u.user_id
		WHERE
		u.user_account_id = #{userAccountId}
		) AS point_history
		ORDER BY
		time DESC
	</select>

</mapper>
